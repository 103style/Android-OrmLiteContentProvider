apply plugin: 'android'
apply plugin: 'android-test'
apply plugin: 'maven-publish'

evaluationDependsOn(':ormlite-content-provider-library')

repositories{
    mavenCentral()
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

dependencies {
    compile project(':ormlite-content-provider-library')

    // Espresso
    androidTestCompile downloadDependencies(
        //baseurl: 'https://android-test-kit.googlecode.com/git/bin/espresso-dependencies/',
        baseurl: 'https://android-test-kit.googlecode.com/git-history/1e71a17c26e3864b3121f59eb99e16911d0548e3/bin/espresso-dependencies/',
        url: ['espresso-1.1.jar', 'testrunner-1.1.jar', 'testrunner-runtime-1.1.jar'])

    androidTestCompile 'com.google.guava:guava:14.0.1',
            'com.squareup.dagger:dagger:1.1.0',
            'org.hamcrest:hamcrest-integration:1.1',
            'org.hamcrest:hamcrest-core:1.1',
            'org.hamcrest:hamcrest-library:1.1'

    androidTestCompile('junit:junit:4.11') {
        exclude module: 'hamcrest-core'
    }
    androidTestCompile('org.robolectric:robolectric:2.3-SNAPSHOT') {
        exclude module: 'classworlds'
        exclude module: 'maven-artifact'
        exclude module: 'maven-artifact-manager'
        exclude module: 'maven-error-diagnostics'
        exclude module: 'maven-model'
        exclude module: 'maven-plugin-registry'
        exclude module: 'maven-profile'
        exclude module: 'maven-project'
        exclude module: 'maven-settings'
        exclude module: 'nekohtml'
        exclude module: 'plexus-container-default'
        exclude module: 'plexus-interpolation'
        exclude module: 'plexus-utils'
        exclude module: 'wagon-file'
        exclude module: 'wagon-http-lightweight'
        exclude module: 'wagon-http-shared'
        exclude module: 'wagon-provider-api'
    }
    androidTestCompile 'com.squareup:fest-android:1.0.+'
}

android {
    compileSdkVersion androidCompileSdkVersion
    buildToolsVersion androidBuildToolsVersion

    buildTypes {
        defaultConfig {
            minSdkVersion defaultConfigMinSdkVersion
            targetSdkVersion defaultConfigTargetSdkVersion
            versionCode 1
            versionName project.version

            testPackageName "com.tojc.ormlite.android.test"
            testInstrumentationRunner "com.google.android.apps.common.testing.testrunner.GoogleInstrumentationTestRunner"
            testFunctionalTest true

            // https://groups.google.com/d/msg/adt-dev/guEZWPll6m4/XWmC8dLwCf4J
        }

        debug {
            debuggable true
        }
        release {
            debuggable false
            runProguard false
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src', 'build/source/generated']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        //instrumentTest.setRoot('tests')
        //androidTest.setRoot('tests')
        androidTest {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src', 'build/source/generated']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
    }
}

androidTest {
    include '**/*Test.class'
    exclude '**/espresso/**/*.class'
}

commonlibrary {
    apply project, "addTaskArtifactApk"
    apply project, "addTaskArtifactJavadocJar"
    apply project, "addTaskArtifactSourceJar"
}

android.applicationVariants
publishing {
    publications {
        releaseApk(MavenPublication) {
            afterEvaluate {
                artifact packageArtifactReleaseApk
            }
        }
        releaseSourceJar(MavenPublication) {
            afterEvaluate {
                artifact packageArtifactReleaseSourceJar
            }
        }
        releaseJavadocJar(MavenPublication) {
            afterEvaluate {
                artifact packageArtifactReleaseJavadocJar
            }
        }
    }
    repositories {
        maven {
            url(mavenRepository)
        }
    }
}

def downloadDependency(String url, String filename = null, File dest = file("${projectDir}/lib")) {
    def file = (!filename) ? new File(new URL(url).getPath()).name : filename
    def target = new File(dest, file)
    if(!target.exists()) {
        println "Download : ${url}"
        println "      to : ${target}"
        dest.mkdirs()
        ant.get(src:url, dest:dest)
    }
    return files(target)
}

def downloadDependencies(Map args) {
    def result = files()
    args.url.each { url ->
        def targeturl = args.containsKey('baseurl') ? args.baseurl + url : url
        def targetdest = args.containsKey('dest') ? args.dest : file("${projectDir}/lib")
        result += downloadDependency(targeturl, null, targetdest)
    }
    return result
}
